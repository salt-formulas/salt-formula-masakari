{%- from "masakari/map.jinja" import masakari with context %}

[DEFAULT]
enabled_apis = masakari_api

# Enable to specify listening IP other than default
masakari_api_listen = {{ masakari.server.api.address }}
# Enable to specify port other than default
masakari_api_listen_port = {{ masakari.server.api.port }}
debug = {{masakari.server.get('debug', 'false')|lower}}

auth_strategy = {{ masakari.server.identity.engine }}

# Match this value when searching for nova in the service catalog. Format is:
# separated values of the form: <service_type>:<service_name>:<endpoint_type>
# (string value)
#nova_catalog_admin_info = compute:Compute Service:publicURL
nova_catalog_admin_info = compute:nova:publicURL

# Region name of this node (string value)
#os_region_name = <None>
os_region_name = {{ masakari.server.identity.region }}

# Location of ca certificates file to use for nova client requests. (string
# value)
#nova_ca_certificates_file = <None>

# Allow to perform insecure SSL requests to nova (boolean value)
#nova_api_insecure = false

# OpenStack privileged account username. Used for requests to other services
# (such as Nova) that require an account with special rights. (string value)
#os_privileged_user_name = <None>
os_privileged_user_name = {{ masakari.server.identity.user }}

# Password associated with the OpenStack privileged account. (string value)
#os_privileged_user_password = <None>
os_privileged_user_password = {{ masakari.server.identity.password }}

# Tenant name associated with the OpenStack privileged account. (string value)
#os_privileged_user_tenant = <None>
os_privileged_user_tenant = {{ masakari.server.identity.tenant }}

# Auth URL associated with the OpenStack privileged account. (uri value)
#os_privileged_user_auth_url = <None>
os_privileged_user_auth_url = {{ masakari.server.identity.protocol }}://{{ masakari.server.identity.host }}:{{ masakari.server.identity.port }}



# Interval in seconds for identifying duplicate notifications. If the
# notification received is identical to the previous ones whose status is either
# new or running and if it's created_timestamp and the current timestamp is less
# than this config option value, then the notification will be considered as
# duplicate and it will be ignored. (integer value)
# Minimum value: 0
#duplicate_notification_detection_interval = 180

# Number of seconds to wait after a service is enabled or disabled. (integer
# value)
#wait_period_after_service_update = 180

# Wait until instance is evacuated (integer value)
#wait_period_after_evacuation = 90

# The monitoring interval for looping (integer value)
#verify_interval = 1

# Number of seconds to wait for instance to shut down (integer value)
#wait_period_after_power_off = 60

# Number of seconds to wait for instance to start (integer value)
#wait_period_after_power_on = 60

# Interval in seconds for processing notifications which are in error or new
# state. (integer value)
#process_unfinished_notifications_interval = 120

# Interval in seconds for identifying notifications which are in new state. If
# the notification is in new state till this config option value after it's
# generated_time, then it is considered that notification is ignored by the
# messaging queue and will be processed by 'process_unfinished_notifications'
# periodic task. (integer value)
#retry_notification_new_status_interval = 60

# Number of threads to be used for evacuating and confirming instances during
# execution of host_failure workflow. (integer value)
# Minimum value: 1
#host_failure_recovery_threads = 3

# Full class name for the Manager for masakari engine (string value)
#engine_manager = masakari.engine.manager.MasakariManager

# Seconds between nodes reporting state to datastore (integer value)
#report_interval = 10

# Enable periodic tasks (boolean value)
#periodic_enable = true

# Max interval time between periodic tasks execution in seconds. (integer value)
#periodic_interval_max = 300

# Range of seconds to randomly delay when starting the periodic task scheduler
# to reduce stampeding. (Disable by setting to 0) (integer value)
#periodic_fuzzy_delay = 60

# Use APIs with SSL enabled (boolean value)
#use_ssl = false

# The IP address on which the Masakari API will listen. (unknown value)
#masakari_api_listen = 0.0.0.0

# The port on which the Masakari API will listen. (integer value)
# Minimum value: 1
# Maximum value: 65535
#masakari_api_listen_port = 15868

# Number of workers for Masakari API service. The default will be the number of
# CPUs available. (integer value)
#masakari_api_workers = <None>

# Maximum time since last check-in for up service (integer value)
#service_down_time = 60

[wsgi]
# The paste configuration file path
api_paste_config = /etc/masakari/api-paste.ini

[keystone_authtoken]
signing_dirname=/tmp/keystone-signing-masakari
revocation_cache_time = 10

# auth_uri = http://127.0.0.1:5000
# auth_url = http://127.0.0.1:35357
auth_uri={{ masakari.server.identity.protocol }}://{{ masakari.server.identity.host }}:{{ masakari.server.identity.port }}
auth_url={{ masakari.server.identity.protocol }}://{{ masakari.server.identity.host }}:{{ masakari.server.identity.port }}

# auth_type = password
auth_type = password

# project_domain_id = default
project_domain_id = {{ masakari.server.identity.get('domain', 'default') }}

# user_domain_id = default
user_domain_id = {{ masakari.server.identity.get('domain', 'default') }}

# project_name = service
project_name = {{ masakari.server.identity.tenant }}

# username = masakari
username = {{ masakari.server.identity.user }}

# password = masakari
password = {{ masakari.server.identity.password }}

{%- if masakari.server.cache is defined %}
memcached_servers={%- for member in masakari.server.cache.members %}{{ member.host }}:{{ member.port }}{% if not loop.last %},{% endif %}{%- endfor %}
{%- endif %}

[database]
# connection = mysql+pymysql://root:admin@127.0.0.1/masakari?charset=utf8
connection = {{ masakari.server.database.engine }}+pymysql://{{ masakari.server.database.user }}:{{ masakari.server.database.password }}@{{ masakari.server.database.host }}/{{ masakari.server.database.name }}

[oslo_messaging_rabbit]
{%- if masakari.server.message_queue.members is defined %}
rabbit_hosts = {% for member in masakari.server.message_queue.members -%}
                   {{ member.host }}:{{ member.get('port', 5672) }}
                   {%- if not loop.last -%},{%- endif -%}
               {%- endfor -%}
{%- else %}
rabbit_host = {{ masakari.server.message_queue.host }}
rabbit_port = {{ masakari.server.message_queue.port }}
{%- endif %}

rabbit_userid = {{ masakari.server.message_queue.user }}
rabbit_password = {{ masakari.server.message_queue.password }}
rabbit_virtual_host = {{ masakari.server.message_queue.virtual_host }}
rpc_conn_pool_size = 300

[host_failure]

#
# From masakari.conf
#

#
# Operators can decide whether all instances or only those instances which
# contain metadata key 'HA_Enabled=True' should be allowed for evacuation from
# a failed source compute node. When set to True, it will evacuate all instances
# from a failed source compute node. First preference will be given to those
# instances which contain 'HA_Enabled=True' metadata key, and then it will
# evacuate the remaining ones. When set to False, it will evacuate only those
# instances which contain 'HA_Enabled=True' metadata key. (boolean value)
#evacuate_all_instances = true

#
# Operators can decide whether error instances should be allowed for evacuation
# from a failed source compute node or not. When set to True, it will ignore
# error instances from evacuation from a failed source compute node. When set to
# False, it will evacuate error instances along with other instances from a
# failed source compute node. (boolean value)
#ignore_instances_in_error_state = false

#
# Operators can decide whether reserved_host should be added to aggregate group
# of failed compute host. When set to True, reserved host will be added to the
# aggregate group of failed compute host. When set to False, the reserved_host
# will not be added to the aggregate group of failed compute host. (boolean
# value)
#add_reserved_host_to_aggregate = false


[instance_failure]

#
# From masakari.conf
#

#
# Operators can decide whether all instances or only those instances which
# contain metadata key 'HA_Enabled=True' should be taken into account to
# recover from instance failure events. When set to True, it will execute
# instance failure recovery actions for an instance irrespective of whether
# that particular instance contains metadata key 'HA_Enabled=True' or not.
# When set to False, it will only execute instance failure recovery actions
# for an instance which contain metadata key 'HA_Enabled=True'. (boolean value)
#process_all_instances = false
process_all_instances = {{ masakari.server.get('engine', {}).get('instance_failure', {}).get('process_all_instances', 'true') }}
