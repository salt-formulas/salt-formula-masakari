{%- from "masakari/map.jinja" import masakari with context %}

# Please read the corosync.conf.5 manual page
totem {
    version: 2

    # Default lifetime of a token
    token: 10000

    # Per extra node, add this number to the token lifetime
    token_coefficient: 2500

    # Allow 10 messages to be lost.
    token_retransmits_before_loss_const: 10

    # Allow a join message to be received in 500 ms
    join: 500

    cluster_name: {{ masakari.corosync.clustername }}

    crypto_cipher: none
    crypto_hash: none

    interface {
        ringnumber: 0
        bindnetaddr: {{ masakari.corosync.multicast.bind_address }}
        # mcastaddr: {{ masakari.corosync.multicast.address }}
        mcastport: {{ masakari.corosync.multicast.port }}
        ttl: 10
    }
    interface {
        ringnumber: 1
        bindnetaddr: {{ masakari.corosync.multicast.rrp_bind_address }}
        mcastport: {{ masakari.corosync.multicast.port + 2 }}
        ttl: 10
    }
    rrp_mode: passive
    transport: udp
}

logging {
    fileline: off
    to_logfile: yes
    to_syslog: yes
    logfile: /var/log/corosync/corosync.log
    debug: off
    timestamp: on
    logger_subsys {
        subsys: QUORUM
        debug: off
    }
}

{%- set nodes = [] %}
nodelist {
{% for host_name, grains in salt['mine.get']('masakari:corosync:clustername:' + masakari.corosync.clustername, 'grains.items', 'pillar').items() %}
{%   set interface = grains['ip_interfaces'].get(masakari.corosync.multicast.interface, []) %}
{%   if interface %}
    node {
        # {{ host_name }}
        ring0_addr: {{ interface[0] }}
        {% do nodes.append(host_name) %}
    }
{%   endif %}
{% endfor %}
}

quorum {
    # Enable and configure quorum subsystem (default: off)
    # see also corosync.conf.5 and votequorum.5
    provider: corosync_votequorum
{% if nodes|length == 2 %}
    two_node: 1
{% endif %}
}
